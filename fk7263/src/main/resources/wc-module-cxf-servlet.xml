<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://cxf.apache.org/core
        http://cxf.apache.org/schemas/core.xsd
        http://cxf.apache.org/transports/http/configuration
        http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">

  <cxf:bus>
    <cxf:features>
      <cxf:logging/>
    </cxf:features>
  </cxf:bus>

  <!-- ws clients -->
  <jaxws:client id="registerMedicalCertificateClient"
                  serviceClass="se.inera.ifv.insuranceprocess.healthreporting.registermedicalcertificate.v3.rivtabp20.RegisterMedicalCertificateResponderInterface"
                  address="${intygstjanst.registermedicalcertificate.endpoint.url}">
  </jaxws:client>

    <jaxws:client id="getMedicalCertificateForCareResponder"
      serviceClass="se.inera.certificate.clinicalprocess.healthcond.certificate.getmedicalcertificateforcare.v1.GetMedicalCertificateForCareResponderInterface"
      address="${intygstjanst.getmedicalcertificateforcare.endpoint.url}">
    </jaxws:client>

  <beans profile="wc-security-test,wc-security-prod">
    <http:conduit
            name="{urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20}RegisterMedicalCertificateResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true" Connection="Keep-Alive"/>
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}" password="${ntjp.ws.certificate.password}"
                        type="${ntjp.ws.certificate.type}"/>
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}" password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}"/>
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>

  </beans>

</beans>
