ext {
    intygClinicalprocessSchematronVersion = "1.0.8"
    intygCertificateSchemasVersion = "1.0.4"
    intygTransportstyrelsenSchemasVersion = "1.0.4"
    rivtaClinicalprocessSchemasVersion = "2.0"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.4"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.4"

    autovalueVersion = "1.1"
    activeMqVersion = "5.13.4"
    commonsCodecVersion = "1.10"
    commonsCollectionsVersion = "3.2.1"
    commonsIoVersion = "2.4"
    commonsLangVersion = "3.1"
    cxfVersion = "3.1.3"
    fkEIntygAdapterVersion = "2.2-RC2-INTYG"
    guavaVersion = "14.0.1"
    itextVersion = "5.3.2"
    jacksonVersion = "2.8.1"
    logbackVersion = "1.0.11"
    phSchematronVersion = "3.0.1"
    saxonVersion = "9.6.0-4"
    servletApiVersion = "2.5"
    slf4jVersion = "1.7.21"
    springSecuritySaml2CoreVersion = "1.0.1.RELEASE"
    springVersion = "4.2.2.RELEASE"

    jsonAssertVersion = "1.2.0"
    mockitoVersion = "1.9.0"
    unitilsCoreVersion = "3.3"
    xmlUnitVersion = "1.4"
}

allprojects {
    group = 'se.inera.intyg.common'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    apply plugin: 'inera-intyg'
    apply plugin: 'maven'
    apply plugin: 'org.ajoberstar.grgit'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(type: VersionPropertyFileTask)

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    uploadArchives.repositories.mavenDeployer {
        repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
            authentication(userName: System.properties['nexusUsername'], password: System.properties['nexusPassword'])
        }
    }

    dependencies {
        testCompile "junit:junit:4.+"
        testCompile "commons-io:commons-io:${commonsIoVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.skyscreamer:jsonassert:${jsonAssertVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"
        testCompile "xmlunit:xmlunit:${xmlUnitVersion}"
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "http://repo.maven.apache.org/maven2" }
    }
}

configure(subprojects.findAll {['fk7263', 'ts-bas', 'ts-diabetes', 'lisjp', 'luse', 'luae_fs', 'luae_na'].contains(it.name)}) {
    apply plugin: 'com.moowork.grunt'

    grunt {
        colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
    }

    node {
        version = '6.6.0'
        download = true
        distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
        workDir = rootProject.projectDir
        nodeModulesDir = rootProject.projectDir
    }

    task jsInclude(type: NodeTask, dependsOn: [npmInstall]) {
        def webappOutputDir = 'build/'

        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}", 'default']
    }

    jar.dependsOn(jsInclude)

    task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall]) {
        outputs.upToDateWhen { false }

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--npmDir=${rootProject.projectDir}", 'lint']
    }

    jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }

    afterEvaluate {
        checkstyleMain.dependsOn jsCodeQuality
    }
}

configure(subprojects.findAll { ['fk7263', 'ts-bas', 'ts-diabetes', 'lisjp'].contains(it.name) }) {
    task unzipWebjars(type: Copy) {
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        into "$buildDir/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
        def webappTestOutputDir = 'build/karma/'

        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=${rootProject.projectDir}/Gruntfile.js", "--base=${projectDir}", "--module=${project.name}",
                "--outputDir=${webappTestOutputDir}", "--npmDir=${rootProject.projectDir}", 'test']
    }

    test.dependsOn(jsTests)

    configurations {
        jstests
    }

    dependencies {
        jstests project(':common-web')
    }
}

task tagRelease(type: TagReleaseTask)

task testReport(type: SharedTestReportTask)

apply from: file("codequality.gradle")

buildscript {
    dependencies {
        classpath 'se.inera.intyg:gradle-intyg-plugin:1.0.+'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.+'
        classpath 'org.ajoberstar:gradle-git:1.+'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.+'
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.+'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.+'
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}
